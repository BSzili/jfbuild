# Build Makefile for Microsoft NMake
!ifdef OVERRIDES
!include $(OVERRIDES)
!endif

SRC=src\ #
!ifndef OBJ
OBJ=obj.msc\ #
!endif
INC=include\ #
!ifndef CFLAGS
CFLAGS=/DSUPERBUILD /DPOLYMOST /DUSE_OPENGL
!endif

o=obj
res=res
asm=masm

ENGINELIB=engine.lib
EDITORLIB=build.lib

DXROOT=c:\sdks\msc\dx7
FMODROOT=c:\sdks\fmodapi370win32\api

# /D these to enable certain features of the port's compile process
# USE_MSC_ASSEMBLY   Use ML and compile the A.ASM assembly code.
#                    If this is not defined, alter the $(OBJ)a.$o in the
#                    ENGINEOBJS declaration to be $(OBJ)a-c.$o
# USE_MSC_PRAGMAS    Use Microsoft inline assembly instead of C code for
#                    the features in PRAGMAS.H
TARGETOPTS=/DUSE_MSC_ASSEMBLY /DUSE_MSC_PRAGMAS

!if 0
# debugging options
flags_cl=/G5 /Ot /Z7
flags_link=/DEBUG
!else
# release options
flags_cl=/G6fy /Ox
flags_link=/RELEASE
!endif

CC=cl
AS=ml
RC=rc
LINK=link /opt:nowin98 /nologo
CFLAGS=$(CFLAGS) /nologo /MD /J $(flags_cl) $(TARGETOPTS) /I$(INC)
LIBS=fmodvc.lib opengl32.lib
ASFLAGS=/nologo /coff
EXESUFFIX=.exe

ENGINEOBJS=$(OBJ)engine.$o \
	$(OBJ)cache1d.$o \
	$(OBJ)a.$o \
	$(OBJ)pragmas.$o \
	$(OBJ)osd.$o \
	$(OBJ)crc32.$o \
	$(OBJ)engineinfo.$o \
	$(OBJ)baselayer.$o \
	$(OBJ)compat.$o \
	$(OBJ)kplib.$o \
	$(OBJ)scriptfile.$o \
	$(OBJ)jmulti.$o \
	$(OBJ)defs.$o

EDITOROBJS=$(OBJ)build.$o \
	$(OBJ)config.$o

GAMEEXEOBJS=$(OBJ)game.$o \
	$(OBJ)sound.$o \
	$(OBJ)config.$o \
	$(OBJ)gameres.$(res) \
	$(OBJ)$(ENGINELIB)

EDITOREXEOBJS=$(OBJ)bstub.$o \
	$(OBJ)buildres.$(res) \
	$(OBJ)$(EDITORLIB) \
	$(OBJ)$(ENGINELIB)
	
PLATFORM=WINDOWS
CFLAGS=$(CFLAGS) /I$(DXROOT)\include /I$(FMODROOT)\inc
LIBS=$(LIBS) user32.lib gdi32.lib
!ifndef RENDERTYPE
RENDERTYPE=WIN
!endif

ENGINEOBJS=$(ENGINEOBJS) $(OBJ)winlayer.$o
CFLAGS=$(CFLAGS) /Dmain=app_main
LIBS=$(LIBS) dxguid.lib wsock32.lib

CFLAGS=$(CFLAGS) /D$(PLATFORM) /DRENDERTYPE$(RENDERTYPE)=1

# RULES
.SUFFIXES: .masm

{$(SRC)}.masm{$(OBJ)}.$o:
	$(AS) /c $(ASFLAGS) /Fo$@ $<

{$(SRC)tmp}.c{$(OBJ)}.$o:
	$(CC) /c $(CFLAGS) /Fo$@ $<

{$(SRC)misc}.rc{$(OBJ)}.$(res):
	$(RC) /fo$@ /r $<

{$(SRC)}.c{$(OBJ)}.$o:
	$(CC) /c $(CFLAGS) /Fo$@ $<

# TARGETS
all: game$(EXESUFFIX) build$(EXESUFFIX) $(OBJ)$(ENGINELIB) $(OBJ)$(EDITORLIB) ;
utils: kextract$(EXESUFFIX) kgroup$(EXESUFFIX) transpal$(EXESUFFIX) ;

enginelib: $(OBJ)$(ENGINELIB) ;
$(OBJ)$(ENGINELIB): $(ENGINEOBJS)
	lib /out:$@ /nologo $**

editorlib: $(OBJ)$(EDITORLIB) ;
$(OBJ)$(EDITORLIB): $(EDITOROBJS)
	lib /out:$@ /nologo $**


game$(EXESUFFIX): $(GAMEEXEOBJS)
	$(LINK) /OUT:$(OBJ)$@ /SUBSYSTEM:WINDOWS /LIBPATH:$(DXROOT)\lib /LIBPATH:$(FMODROOT)\lib $(flags_link) /MAP $** $(LIBS) msvcrt.lib
	copy /y $(OBJ)$@ $@
	
build$(EXESUFFIX): $(EDITOREXEOBJS)
	$(LINK) /OUT:$(OBJ)$@ /SUBSYSTEM:WINDOWS /LIBPATH:$(DXROOT)\lib /LIBPATH:$(FMODROOT)\lib $(flags_link) /MAP $** $(LIBS) msvcrt.lib
	copy /y $(OBJ)$@ $@

# DEPENDENCIES
!include Makefile.deps

$(OBJ)engineinfo.$o: writeengineinfo $(SRC)tmp\engineinfo.c

writeengineinfo:
	echo const char _engine_cflags[] = "$(CFLAGS:\=\\)"; > $(SRC)tmp\engineinfo.c
	echo const char _engine_libs[] = "$(LIBS)"; >> $(SRC)tmp\engineinfo.c
	echo const char _engine_uname[] = "unknown"; >> $(SRC)tmp\engineinfo.c
	echo const char _engine_compiler[] = "$(CC)"; >> $(SRC)tmp\engineinfo.c
	echo const char _engine_date[] = __DATE__ " " __TIME__; >> $(SRC)tmp\engineinfo.c

# PHONIES	
clean:
	-del $(ENGINEOBJS) $(EDITOROBJS) $(GAMEEXEOBJS) $(EDITOREXEOBJS) game$(EXESUFFIX) game.sym$(EXESUFFIX) build$(EXESUFFIX) build.sym$(EXESUFFIX)

